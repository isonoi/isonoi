[{"path":"https://isonoi.github.io/isonoi/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2023 isonoi authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://isonoi.github.io/isonoi/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Robin Lovelace. Maintainer. Bernhard Dannemann. Author.","code":""},{"path":"https://isonoi.github.io/isonoi/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Dannemann B (2025). isonoi: Generate 'Voronoi-esque' Polygons Travel Isochrones. R package version 0.0.0.9000, https://isonoi.github.io/isonoi/.","code":"@Manual{,   title = {isonoi: Generate 'Voronoi-esque' Polygons from Travel Isochrones},   author = {Bernhard Dannemann},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://isonoi.github.io/isonoi/}, }"},{"path":"https://isonoi.github.io/isonoi/index.html","id":"isonoi","dir":"","previous_headings":"","what":"Generate Voronoi-esque Polygons from Travel Isochrones","title":"Generate Voronoi-esque Polygons from Travel Isochrones","text":"goal isonoi provide example data functions demonstrate concept ‘iso voronoi’ polygons. designed prototype implementation ideas outlined demonstrated example data reproducible code https://github.com/isonoi/isonoi Give spin reproducible examples shown .  3 figures show outputs packages next standard voronoi diagram.","code":"remotes::install_github(\"isonoi/isonoi\") # TODO: remove this and keep only library call devtools::load_all() #> ℹ Loading isonoi # library(isonoi) library(sf) x = net_oldenburg_raw points = points_oldenburg grid = iso_grid(x) plot(grid, border = \"grey\") plot(sf::st_geometry(x), add = TRUE) plot(points, col = \"red\", add = TRUE, pch = 18, cex = 2) #> Warning in plot.sf(points, col = \"red\", add = TRUE, pch = 18, cex = 2): #> ignoring all but the first attribute library(tmap) poly = sf::st_convex_hull(sf::st_union(x)) vnoi = iso_vnoi(points, poly) #> Warning in st_voronoi.sfc(sf::st_union(points), poly): st_voronoi does not #> correctly triangulate longitude/latitude data #> Warning: attribute variables are assumed to be spatially constant throughout #> all geometries vgrid = iso_vgrid(points, grid) #> lon-lat points net = sfnetworks::as_sfnetwork(x) vsfn = iso_sfn(points, net, grid) #> lon-lat points #> lon-lat points #> Warning: st_centroid assumes attributes are constant over geometries #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> lon-lat points #> Warning in shortest_paths(x, from, to, weights = weights, output = \"both\", : At #> core/paths/dijkstra.c:446 : Couldn't reach some vertices. #> Joining with `by = join_by(name)` m1 = tm_shape(vnoi) + tm_fill(\"name\") m2 = tm_shape(vgrid) + tm_fill(\"name\") m3 = tm_shape(vsfn) + tm_fill(\"name\") tmap_arrange(m1, m2, m3, nrow = 1) #> Some legend labels were too wide. These labels have been resized to 0.24, 0.62, 0.29. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger. #> Some legend labels were too wide. These labels have been resized to 0.24, 0.62, 0.29. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger. #> Some legend labels were too wide. These labels have been resized to 0.24, 0.62, 0.29. Increase legend.width (argument of tm_layout) to make the legend wider and therefore the labels larger."},{"path":"https://isonoi.github.io/isonoi/reference/iso_grid.html","id":null,"dir":"Reference","previous_headings":"","what":"Create hexagonal grid — iso_grid","title":"Create hexagonal grid — iso_grid","text":"Create hexagonal grid sf object.","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_grid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create hexagonal grid — iso_grid","text":"","code":"iso_grid(x, resolution = 9)"},{"path":"https://isonoi.github.io/isonoi/reference/iso_grid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create hexagonal grid — iso_grid","text":"x sf object convex hull determine hex grid resolution resolution hex grid","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_grid.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create hexagonal grid — iso_grid","text":"sfc object","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_grid.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Create hexagonal grid — iso_grid","text":"See documentation upstream h3 library information. Note: default value 9 represents around 0.1 km^2, may way consider higher values (e.g. 10, around 0.015 km^2 15k m^2) detailed analysis lower values larger areas.","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_grid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Create hexagonal grid — iso_grid","text":"function wrapper h3o::sfc_to_cells h3o::flatten_h3. assumes input object geographic (lon/lat) coordinate system, e.g. EPSG:4326.","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_grid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Create hexagonal grid — iso_grid","text":"","code":"x = net_oldenburg_raw iso_grid(x) #> Geometry set for 48 features  #> Geometry type: POLYGON #> Dimension:     XY #> Bounding box:  xmin: 8.195993 ymin: 53.12823 xmax: 8.23453 ymax: 53.14946 #> Geodetic CRS:  WGS 84 #> First 5 geometries: #> POLYGON ((8.195993 53.14152, 8.196243 53.13993,... #> POLYGON ((8.198845 53.13939, 8.199095 53.1378, ... #> POLYGON ((8.200947 53.14204, 8.201197 53.14045,... #> POLYGON ((8.198095 53.14417, 8.198345 53.14258,... #> POLYGON ((8.196743 53.13674, 8.196993 53.13515,..."},{"path":"https://isonoi.github.io/isonoi/reference/iso_osrm.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate voronoi-style polygons based on grid with OSRM routing duration — iso_osrm","title":"Calculate voronoi-style polygons based on grid with OSRM routing duration — iso_osrm","text":"Calculate voronoi-style polygons based grid OSRM routing duration","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_osrm.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate voronoi-style polygons based on grid with OSRM routing duration — iso_osrm","text":"","code":"iso_osrm(   x,   points,   measure = \"duration\",   osrm.server = getOption(\"osrm.server\"),   osrm.profile = getOption(\"osrm.profile\") )"},{"path":"https://isonoi.github.io/isonoi/reference/iso_osrm.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate voronoi-style polygons based on grid with OSRM routing duration — iso_osrm","text":"x sf object grid points sf object points measure passed osrm::osrmTable, can either \"duration\" (minutes) \"distance\" (meters) osrm.server base URL routing server (end \"/\"!) osrm.profile routing profile use","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_osrm.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate voronoi-style polygons based on grid with OSRM routing duration — iso_osrm","text":"sf object grid, column 'index_min' gives index input point, measure minimal","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_osrm.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate voronoi-style polygons based on grid with OSRM routing duration — iso_osrm","text":"function requires OSRM running, server defined setting osrm package, .e., getOption(\"osrm.server\") getOption(\"osrm.profile\")","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_osrm.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate voronoi-style polygons based on grid with OSRM routing duration — iso_osrm","text":"","code":"points = points_oldenburg x = sf::st_as_sf(iso_grid(net_oldenburg_raw, resolution = 10)) grid = isonoi::iso_osrm(x, points, measure = \"duration\", osrm.server = \"http://router.project-osrm.org/\", osrm.profile = \"car\") plot(grid)"},{"path":"https://isonoi.github.io/isonoi/reference/iso_sfn.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate voronoi-style polygons based on network distance/time with sfnetworks — iso_sfn","title":"Calculate voronoi-style polygons based on network distance/time with sfnetworks — iso_sfn","text":"Calculate voronoi-style polygons based network distance/time sfnetworks","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_sfn.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate voronoi-style polygons based on network distance/time with sfnetworks — iso_sfn","text":"","code":"iso_sfn(points, net, grid, n = 3)"},{"path":"https://isonoi.github.io/isonoi/reference/iso_sfn.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate voronoi-style polygons based on network distance/time with sfnetworks — iso_sfn","text":"points sf object points net sfnetworks object representing travel network grid sf object grid n number nearest points calculate routes ","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_sfn.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate voronoi-style polygons based on network distance/time with sfnetworks — iso_sfn","text":"","code":"points = points_oldenburg net = sfnetworks::as_sfnetwork(net_oldenburg_raw, directed = FALSE) grid = iso_grid(net_oldenburg_raw) sfn = iso_sfn(points, net, grid) #> lon-lat points #> lon-lat points #> Warning: st_centroid assumes attributes are constant over geometries #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> lon-lat points #> Joining with `by = join_by(name)` plot(sfn)"},{"path":"https://isonoi.github.io/isonoi/reference/iso_vgrid.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate voronoi-style polygons based on grid with Euclidean distances — iso_vgrid","title":"Calculate voronoi-style polygons based on grid with Euclidean distances — iso_vgrid","text":"Calculate voronoi-style polygons based grid Euclidean distances","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_vgrid.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate voronoi-style polygons based on grid with Euclidean distances — iso_vgrid","text":"","code":"iso_vgrid(points, grid)"},{"path":"https://isonoi.github.io/isonoi/reference/iso_vgrid.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate voronoi-style polygons based on grid with Euclidean distances — iso_vgrid","text":"points sf object points grid sf object grid","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_vgrid.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Calculate voronoi-style polygons based on grid with Euclidean distances — iso_vgrid","text":"function groups first column points object unique (e.g. OSM ID).","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_vgrid.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Calculate voronoi-style polygons based on grid with Euclidean distances — iso_vgrid","text":"","code":"points = points_oldenburg x = net_oldenburg_raw grid = iso_grid(x) vgrid = iso_vgrid(points, grid) #> lon-lat points"},{"path":"https://isonoi.github.io/isonoi/reference/iso_vnoi.html","id":null,"dir":"Reference","previous_headings":"","what":"Generate voronoi polygons from a bounding box and points — iso_vnoi","title":"Generate voronoi polygons from a bounding box and points — iso_vnoi","text":"Generate voronoi polygons bounding box points","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_vnoi.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Generate voronoi polygons from a bounding box and points — iso_vnoi","text":"","code":"iso_vnoi(points, poly)"},{"path":"https://isonoi.github.io/isonoi/reference/iso_vnoi.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Generate voronoi polygons from a bounding box and points — iso_vnoi","text":"points sf object points poly polygon object","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_vnoi.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Generate voronoi polygons from a bounding box and points — iso_vnoi","text":"sf object voronoi polygons","code":""},{"path":"https://isonoi.github.io/isonoi/reference/iso_vnoi.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Generate voronoi polygons from a bounding box and points — iso_vnoi","text":"","code":"points = points_oldenburg poly = sf::st_convex_hull(sf::st_union(net_oldenburg_raw)) nvoi = iso_vnoi(points, poly) #> Warning: st_voronoi does not correctly triangulate longitude/latitude data #> Warning: attribute variables are assumed to be spatially constant throughout all geometries plot(nvoi) plot(points, add = TRUE) #> Warning: ignoring all but the first attribute"},{"path":"https://isonoi.github.io/isonoi/reference/net_oldenburg_raw.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset representing the road network in Oldenburg, Germany — net_oldenburg_raw","title":"Dataset representing the road network in Oldenburg, Germany — net_oldenburg_raw","text":"See info 'data-raw' folder see dataset created","code":""},{"path":"https://isonoi.github.io/isonoi/reference/net_oldenburg_raw.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset representing the road network in Oldenburg, Germany — net_oldenburg_raw","text":"","code":"net_oldenburg_raw"},{"path":"https://isonoi.github.io/isonoi/reference/net_oldenburg_raw.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset representing the road network in Oldenburg, Germany — net_oldenburg_raw","text":"object class sf (inherits data.frame) 1738 rows 9 columns.","code":""},{"path":"https://isonoi.github.io/isonoi/reference/net_oldenburg_raw.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset representing the road network in Oldenburg, Germany — net_oldenburg_raw","text":"","code":"net_oldenburg_raw #> Simple feature collection with 1738 features and 8 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 8.199671 ymin: 53.13 xmax: 8.22954 ymax: 53.14796 #> Geodetic CRS:  WGS 84 #> First 10 features: #>     osm_id              name lanes lit maxspeed  rcn smoothness surface #> 1  4396682 Heiligengeistwall     3 yes       50  yes       good asphalt #> 2  4396687        Staugraben     2 yes       50 <NA>       <NA> asphalt #> 3  4396693              Stau     3 yes       50 <NA>       <NA> asphalt #> 4  4830866        Poststraße     2 yes       50 <NA>       <NA> asphalt #> 5  4830867        Schloßwall     2 yes       50 <NA>       <NA> asphalt #> 6  4830868       Theaterwall     4 yes       50 <NA>       <NA> asphalt #> 7  4830869     Amalienstraße     1 yes       50 <NA>       <NA> asphalt #> 8  4856811  Stedinger Straße     3 yes       50 <NA>       <NA> asphalt #> 9  4880848       Lindenallee  <NA> yes       50 <NA>       <NA> asphalt #> 10 4950113 Würzburger Straße  <NA> yes       30 <NA>       <NA> asphalt #>                          geometry #> 1  LINESTRING (8.208733 53.141... #> 2  LINESTRING (8.217407 53.140... #> 3  LINESTRING (8.21851 53.1405... #> 4  LINESTRING (8.218106 53.140... #> 5  LINESTRING (8.215947 53.136... #> 6  LINESTRING (8.213433 53.137... #> 7  LINESTRING (8.218103 53.139... #> 8  LINESTRING (8.22254 53.1317... #> 9  LINESTRING (8.205843 53.141... #> 10 LINESTRING (8.209448 53.146..."},{"path":"https://isonoi.github.io/isonoi/reference/points_oldenburg.html","id":null,"dir":"Reference","previous_headings":"","what":"Dataset representing pubs in Oldenburg, Germany — points_oldenburg","title":"Dataset representing pubs in Oldenburg, Germany — points_oldenburg","text":"See info 'data-raw' folder see dataset created","code":""},{"path":"https://isonoi.github.io/isonoi/reference/points_oldenburg.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Dataset representing pubs in Oldenburg, Germany — points_oldenburg","text":"","code":"points_oldenburg"},{"path":"https://isonoi.github.io/isonoi/reference/points_oldenburg.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Dataset representing pubs in Oldenburg, Germany — points_oldenburg","text":"object class sf (inherits data.frame) 4 rows 3 columns.","code":""},{"path":"https://isonoi.github.io/isonoi/reference/points_oldenburg.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Dataset representing pubs in Oldenburg, Germany — points_oldenburg","text":"","code":"net_oldenburg_raw #> Simple feature collection with 1738 features and 8 fields #> Geometry type: LINESTRING #> Dimension:     XY #> Bounding box:  xmin: 8.199671 ymin: 53.13 xmax: 8.22954 ymax: 53.14796 #> Geodetic CRS:  WGS 84 #> First 10 features: #>     osm_id              name lanes lit maxspeed  rcn smoothness surface #> 1  4396682 Heiligengeistwall     3 yes       50  yes       good asphalt #> 2  4396687        Staugraben     2 yes       50 <NA>       <NA> asphalt #> 3  4396693              Stau     3 yes       50 <NA>       <NA> asphalt #> 4  4830866        Poststraße     2 yes       50 <NA>       <NA> asphalt #> 5  4830867        Schloßwall     2 yes       50 <NA>       <NA> asphalt #> 6  4830868       Theaterwall     4 yes       50 <NA>       <NA> asphalt #> 7  4830869     Amalienstraße     1 yes       50 <NA>       <NA> asphalt #> 8  4856811  Stedinger Straße     3 yes       50 <NA>       <NA> asphalt #> 9  4880848       Lindenallee  <NA> yes       50 <NA>       <NA> asphalt #> 10 4950113 Würzburger Straße  <NA> yes       30 <NA>       <NA> asphalt #>                          geometry #> 1  LINESTRING (8.208733 53.141... #> 2  LINESTRING (8.217407 53.140... #> 3  LINESTRING (8.21851 53.1405... #> 4  LINESTRING (8.218106 53.140... #> 5  LINESTRING (8.215947 53.136... #> 6  LINESTRING (8.213433 53.137... #> 7  LINESTRING (8.218103 53.139... #> 8  LINESTRING (8.22254 53.1317... #> 9  LINESTRING (8.205843 53.141... #> 10 LINESTRING (8.209448 53.146..."}]
